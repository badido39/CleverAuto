@page "/fetchdata"

@using CleverAuto.Data
@using CleverAuto.Helpers;
@using CleverAuto.Models;
@using CleverAuto.Services;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.QuickGrid
@using Newtonsoft.Json;
@using System.Diagnostics
@inject  ICustomerServiceRemote CustomerService;

<h1>Clients</h1>
@if (isLoading)
{
    <div class="spinner-border text-center" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
<div >
    <QuickGrid Class="col-12" Items="@FilteredCustomers" Pagination="@pagination" >
        <PropertyColumn Title="ID"   Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Title="Nom Prenom"   Property="@(p => p.Name)" Sortable="true" >
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Cusotomer name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="Email"   Property="@(p => p.Email)" Sortable="true" />
        <PropertyColumn Title="Telephone"   Property="@(p => p.Phone)" Sortable="true" />
        <PropertyColumn Title="Numero De Serie"   Property="@(p => p.Car.VIN)" Sortable="true" />
        <PropertyColumn Title="Marque"   Property="@(p => p.Car.Model)" Sortable="true" />
        <PropertyColumn Title="Modele"   Property="@(p => p.Car.Make)" Sortable="true" />
        <PropertyColumn Title="Details"   Property="@(p => p.Car.Services[0].Type)" Sortable="true" />
        
        

   
</QuickGrid>
<Paginator State="@pagination" />
</div>
<div class="page-buttons">
    Page:
    @if (pagination.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex;
            <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                    class="@PageButtonClass(capturedIndex)"
                    aria-current="@AriaCurrentValue(capturedIndex)"
                    aria-label="Go to page @(pageIndex + 1)">
                @(pageIndex + 1)
            </button>
        }
    }
</div>
}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Customer>? Customers;
    string nameFilter;
    bool isLoading = true;

    IQueryable<Customer> FilteredCustomers
    {
        get
        {
            var result = Customers;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }



            return result;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await CustomerService.GetAllCustomerAsync();
            StateHasChanged();
            Customers = res.AsQueryable(); 
            Debug.WriteLine(Customers.Count()); 

            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            //
        }
        finally
        {
            isLoading = false;
        }

    }
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
